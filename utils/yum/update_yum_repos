#!/bin/bash
#
# This script updates the metadata of all RPM repositories found under a root
# directory. A directory is considered a RPM repository if it contains RPM files.
# If the RPM repository is not yet configured as a YUM repository, metadata will
# be created.
#
# Written by Michel Jouvin - LAL/CNRS - 8/10/2009

# Possible RPM group file name, relative to the directory containing the RPMs
group_file_list="../base/comps.xml repodata/comps-sl.xml"

force_update=0
sl5_compatible=1
verbose=0

usage () {
  echo "Usage:   $(basename $0) [--debug] [--force] [--nosl5] repos_parent..."
  exit 1
}


update_metadata () {
  if [ -z "$1" ]
  then
    echo "Internal error: directory parameter missing"
    exit 10
  fi
  # Add a trailing / to directory in case this is a symlink
  local current_dir="$1/"
  [ ${verbose} -eq 1 ] && echo "Processing directory ${current_dir}..."

  local rpm_files=$(ls ${current_dir}/*-*.*.rpm 2>/dev/null)
  if [ -z "${rpm_files}" -a -d "${current_dir}/repodata" ]
  then
    echo "Skipping ${current_dir}: OS-related repository"
    return
  fi

  # Recursively process every subdirectory.
  # If a subdirectory contains repodata but no RPMs (RPMs in subdirectories), stop
  # processing it (this is probably an OS-related repository)
  local repos_dirs=$(find -L ${current_dir} -maxdepth 1 -type d -or -type l | egrep -v "^${current_dir}\$")
  for repo_dir in ${repos_dirs}
  do
     update_metadata ${repo_dir}
  done

  # Rebuild metadata in the current directory if there is RPMs in it
  if [ -z "${rpm_files}" ]
  then
    #echo "$dir doesn't contain RPM files. Ignoring..."
    continue
  fi
  echo "Updating YUM metadata in $current_dir..."
  
  # Check if there is a RPM group file in one of the usual locations.
  # This should happen only for OS repositories where these files are located in
  # one of the following location:
  #    - SL4: ../base/comps.xml
  #    - SL5: repodata/comps-sl.xml
  # Note that there is no easy way to tell a repository is for OS distribution, so
  # the check is done for every repository.
  
  local rpm_group_file=''
  for group_file in ${group_file_list}
  do
    if [ -f ${current_dir}/${group_file} ]
    then
      rpm_group_file="-g ${current_dir}/${group_file}"
      echo "Detected RPM group file. Configuring createrepo to use it (${rpm_group_file})..."
      break
    fi
  done
  
  log_file=/tmp/$(basename $0)$(echo ${current_dir}|sed -e 's%/%_%g').err
  #echo createrepo ${createrepo_opts} ${rpm_group_file} ${current_dir}
  createrepo ${createrepo_opts} ${rpm_group_file} ${current_dir} >/dev/null 2> ${log_file}
  if [ $? -ne 0 ]
  then
    echo "Failed to update YUM metadata in $current_dir (see ${log_file} for details"
  else
    if [ ! -s  ${log_file} ]
    then
      rm -f ${log_file}
    fi
  fi
}

while [ -n "$(echo $1 |grep '^-')" ]
do
  case $1 in
    --debug)
        verbose=1
        ;;

    -h|--help)
         usage
         ;;

    --force)
        force_update=1
        ;;

    --nosl5)
        sl5_compatible=0
        ;;

    *)
         echo "Unsupported option ($1)"
         usage
         ;;
  esac
  shift
done

if [ -z "$1" ]
then
  echo "You need to specify parent directory of YUM repositories"
  usage
fi

createrepo_opts='--update --database'
if [ ${sl5_compatible} -eq 1 ]
then
  createrepo_opts="${createrepo_opts} -s sha"
fi

if [ ${force_update} -eq 0 ]
then
  createrepo_opts="${createrepo_opts} --checkts"
fi

trap "echo 'Update interrupted by CTRL/C';exit 2" INT

for repos_parent in $*
do
  if [ ! -d ${repos_parent} ]
  then
    echo "Error: ${repos_parent} is not a valid repository parent"
    continue
  fi

  update_metadata ${repos_parent}
done
